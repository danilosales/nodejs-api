name: pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "*" ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: api-cadastro-pessoas
  ECS_SERVICE: service-cadastro-pessoas
  ECS_CLUSTER: cluster-cadastro-pessoas
  ECS_TASK_DEFINITION: aws-task-definition.json
  CONTAINER_NAME: cadastro-pessoas

jobs:
  tests:
    name: tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v3
      - run: git fetch --prune --unshallow

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Use PostgreSQL
        uses: harmon758/postgresql-action@v1
        with:
          postgresql version: '11'
          postgresql db: 'cadastro_pessoas'
          postgresql user: 'postgres'
          postgresql password: 'postgres'

      - name: Install dependencies
        run: npm ci --frozen-lockfile

      - name: Build
        run: npm run build --if-present

      - name: Run tests
        run: npm test

      - name: Create .env with Github Secrets and run script
        run: |
          touch .env
          echo DB_DATABASE=$DB_DATABASE >> .env
          echo DB_USER=$DB_USER >> .env
          echo DB_PASSWORD=$DB_PASSWORD >> .env
          echo DB_HOST=$DB_HOST >> .env
          echo DB_PORT=$DB_PORT >> .env
        env:
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}

  deploy:
    name: deploy
    if: ${{ github.event_name != 'pull_request' && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs: tests
    runs-on: ubuntu-latest

    steps:
      - name: Go to the project root
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
